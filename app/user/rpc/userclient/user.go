// Code generated by goctl. DO NOT EDIT.
// Source: user.proto

package userclient

import (
	"context"

	"github.com/zero-vue-demo/app-center-public/rpc/user"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	CheckToken_Request   = user.CheckToken_Request
	CheckToken_Response  = user.CheckToken_Response
	DeleteToken_Request  = user.DeleteToken_Request
	DeleteToken_Response = user.DeleteToken_Response
	MakeToken_Request    = user.MakeToken_Request
	MakeToken_Response   = user.MakeToken_Response

	User interface {
		// 生成 token（登录）
		MakeToken(ctx context.Context, in *MakeToken_Request, opts ...grpc.CallOption) (*MakeToken_Response, error)
		// 校验 token（拓展校验、刷新 token）
		CheckToken(ctx context.Context, in *CheckToken_Request, opts ...grpc.CallOption) (*CheckToken_Response, error)
		// 移除 token（安全退出）
		DeleteToken(ctx context.Context, in *DeleteToken_Request, opts ...grpc.CallOption) (*DeleteToken_Response, error)
	}

	defaultUser struct {
		cli zrpc.Client
	}
)

func NewUser(cli zrpc.Client) User {
	return &defaultUser{
		cli: cli,
	}
}

// 生成 token（登录）
func (m *defaultUser) MakeToken(ctx context.Context, in *MakeToken_Request, opts ...grpc.CallOption) (*MakeToken_Response, error) {
	client := user.NewUserClient(m.cli.Conn())
	return client.MakeToken(ctx, in, opts...)
}

// 校验 token（拓展校验、刷新 token）
func (m *defaultUser) CheckToken(ctx context.Context, in *CheckToken_Request, opts ...grpc.CallOption) (*CheckToken_Response, error) {
	client := user.NewUserClient(m.cli.Conn())
	return client.CheckToken(ctx, in, opts...)
}

// 移除 token（安全退出）
func (m *defaultUser) DeleteToken(ctx context.Context, in *DeleteToken_Request, opts ...grpc.CallOption) (*DeleteToken_Response, error) {
	client := user.NewUserClient(m.cli.Conn())
	return client.DeleteToken(ctx, in, opts...)
}
